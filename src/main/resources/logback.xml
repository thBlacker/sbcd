<?xml version="1.0" encoding="UTF-8" ?>
<configuration>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
    </appender>


    <!-- other 类型日志，在other文件夹中-->
    <property name="OTHER" value="logs/other" /><!--1、相对路径:根目录logs/other  2、绝对路径 /logs/other-->
    <appender name="other" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${OTHER}/log_%d{yyyy-MM-dd}.log</FileNamePattern> <!-- OTHER 对应peoperty 节点的值 -->
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
        <!--日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>
    </appender>
    <logger name="other" additivity="false"><!-- 这个是和代码里面的 LoggerFactory.getLogger(key);  对应的 key= other-->
        <level value="info" /> <!-- 日志级别 -->
        <appender-ref ref="other" /> <!-- 对应那个 appender 节点-->
    </logger>


    <!-- Service日志  在service 文件夹中-->
    <property name="SERVICE" value="logs/service" />
    <appender name="service" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${SERVICE}/log_%d{yyyy-MM-dd}.log</FileNamePattern>
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
        <!--日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>
    </appender>
    <logger name="service" additivity="false">
        <level value="info" />
        <appender-ref ref="service" />
    </logger>


    <!-- other 类型日志，在other文件夹中-->
    <property name="CATALINA" value="logs" /><!--1、相对路径:根目录logs/other  2、绝对路径 /logs/other-->
    <appender name="catalina" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件输出的文件名-->
            <FileNamePattern>${CATALINA}/catalina_%d{yyyy-MM-dd}.log</FileNamePattern> <!-- OTHER 对应peoperty 节点的值 -->
            <!--日志文件保留天数-->
            <MaxHistory>30</MaxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
        </encoder>
        <!--日志文件最大的大小-->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>10MB</MaxFileSize>
        </triggeringPolicy>
    </appender>
    <logger name="catalina" additivity="false"><!-- 这个是和代码里面的 LoggerFactory.getLogger(key);  对应的 key= other-->
        <level value="info" /> <!-- 日志级别 -->
        <appender-ref ref="catalina" /> <!-- 对应那个 appender 节点-->
    </logger>


    　　<root level="INFO">
　　　     <appender-ref ref="catalina" /><!--默认的文件夹LoggerFactory.getLogger(key);  logger 节点的name 没有匹配到 key-->
　　</root>

</configuration>